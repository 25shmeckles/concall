import pysam
import argparse

class RcaProcessor:
    """
    A processor for modifying bam files concerning circular reads generated by Rolling circle amplification.
    """
    def __init__(self, path, write_fasta=None):
        self.path = path
        self.write_fasta = write_fasta
        self.bam = pysam.AlignmentFile(self.path)

    def rotate_bam_by_cigar(self):
        with open(self.write_fasta, "w+") as fasta:
            for i, read in enumerate(self.bam):
                read_seq = read.get_forward_sequence()
                if read.is_unmapped:
                    fasta.write(f">{read.qname}\n")
                    fasta.write(f"{read_seq}\n")
                else:
                    if not read.is_supplementary:
                        left_soft = False
                        right_soft = False
                        rotate_head_to_tail = 0
                        rotate_tail_to_head = 0
                        read_len = len(read_seq)
                        # assert read_seq != ""
                        # assert read_len > 0
                        # If a read starts with soft clip or hard clip:
                        if read.cigartuples[0][0] == 4 or read.cigartuples[0][0] == 5:
                            left_soft = True
                            rotate_head_to_tail = read.cigartuples[0][1]
                        if read.cigartuples[-1][0] == 4 or read.cigartuples[-1][0] == 5:
                            right_soft = True
                            rotate_tail_to_head = read.cigartuples[-1][1]
                        #If both side has clipping, solution now: rotate the longer fragment to the shorter side.
                        if left_soft and right_soft:
                            # check each side length
                            if rotate_tail_to_head - rotate_head_to_tail > 0:
                                left_soft = False
                            else:
                                right_soft = False
                        # if the read is originally on the Crick strand (mapped reverse), all information need to swap
                        if read.is_reverse:
                            right_soft, left_soft = left_soft, right_soft
                            rotate_head_to_tail, rotate_tail_to_head = rotate_tail_to_head, rotate_head_to_tail
                        # write results:
                        fasta.write(f">{read.qname}\n")
                        if right_soft:
                            fasta.write(read_seq[-rotate_tail_to_head:] + read_seq[:read_len - rotate_tail_to_head] +
                                        "\n")
                        if left_soft:
                            fasta.write(
                                read_seq[-(read_len - rotate_head_to_tail):] + read_seq[:rotate_head_to_tail] +
                                "\n")

if __name__=="__main__":
    parser = argparse.ArgumentParser(description='Rotate fasta records based on bam mapping to completely map circular reads.')
    parser.add_argument('-i','--input_bam', type=str,
                        help='input bam file')
    parser.add_argument('-o','--output_fasta', type=str,
                        help='output fasta file')
    args = parser.parse_args()
    bam = RcaProcessor(args.input_bam, args.output_fasta)
    bam.rotate_bam_by_cigar()
